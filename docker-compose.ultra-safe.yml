# JAB租赁平台 - 超安全Docker Compose配置
# 适用于段错误频发和资源受限的环境
# 使用Ubuntu基础镜像和保守的资源配置

version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:13-alpine
    container_name: jab_postgres_ultra_safe
    environment:
      POSTGRES_DB: jab_rental
      POSTGRES_USER: jab_user
      POSTGRES_PASSWORD: jab_password_2024
      # PostgreSQL内存优化
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=16MB
      -c work_mem=2MB
      -c max_connections=50
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jab_user -d jab_rental"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: jab_redis_ultra_safe
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    command: >
      redis-server
      --maxmemory 64mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # JAB应用
  app:
    build:
      context: .
      dockerfile: Dockerfile.ultra-safe
      args:
        - NODE_ENV=production
    container_name: jab_app_ultra_safe
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://jab_user:jab_password_2024@postgres:5432/jab_rental
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-super-secret-key-change-in-production
      - NEXTAUTH_URL=http://localhost
      - NODE_OPTIONS=--max-old-space-size=1536
      - HOSTNAME=0.0.0.0
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    volumes:
      - /tmp:/tmp:rw

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: jab_nginx_ultra_safe
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
