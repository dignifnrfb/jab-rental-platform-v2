# JAB租赁平台 - 稳定镜像版本
# 使用稳定可靠的Docker镜像，避免镜像拉取问题
# 适用于生产环境部署

version: '3.8'

services:
  # 应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile.stable
    container_name: jab-app-stable
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://jab_user:jab_password_2024@postgres:5432/jab_rental
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_SECRET=your-super-secret-key-change-this-in-production
      - NEXTAUTH_URL=http://localhost:3000
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL数据库
  postgres:
    image: postgres:15  # 使用标准镜像而非alpine
    container_name: jab-postgres-stable
    environment:
      POSTGRES_DB: jab_rental
      POSTGRES_USER: jab_user
      POSTGRES_PASSWORD: jab_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - jab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jab_user -d jab_rental"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis缓存
  redis:
    image: redis:7  # 使用标准镜像而非alpine
    container_name: jab-redis-stable
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx反向代理
  nginx:
    image: nginx:stable  # 使用stable标签
    container_name: jab-nginx-stable
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - jab-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # 容器更新服务（可选）
  watchtower:
    image: containrrr/watchtower:latest
    container_name: jab-watchtower-stable
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=false
    networks:
      - jab-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

# 数据卷
volumes:
  postgres_data:
    driver: local
    name: jab_postgres_data_stable
  redis_data:
    driver: local
    name: jab_redis_data_stable

# 网络
networks:
  jab-network:
    driver: bridge
    name: jab-network-stable
    ipam:
      config:
        - subnet: 172.20.0.0/16