services:
  # PostgreSQL 数据库 - 针对4GB内存优化
  postgres:
    image: postgres:15-alpine
    container_name: jab-postgres
    environment:
      POSTGRES_DB: jab_rental_db
      POSTGRES_USER: jab_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jab_secure_2024}
      # 内存优化配置
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - jab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jab_user -d jab_rental_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存 - 轻量级配置
  redis:
    image: redis:7-alpine
    container_name: jab-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - jab-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # JAB 租赁平台应用
  app:
    build: 
      context: .
      dockerfile: ./dockerfile
      args:
        NODE_ENV: production
    container_name: jab-app
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://jab_user:${DB_PASSWORD:-jab_secure_2024}@postgres:5432/jab_rental_db?schema=public
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-your-secret-key-here}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET:-}
      # 阿里云优化
      - TZ=Asia/Shanghai
      - NODE_OPTIONS=--max-old-space-size=1024
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 512M
    networks:
      - jab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - app_uploads:/app/uploads

  # Nginx 反向代理 - 阿里云优化
  nginx:
    image: nginx:alpine
    container_name: jab-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/logs:/var/log/nginx
      - app_uploads:/var/www/uploads:ro
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - jab-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 (可选)
  watchtower:
    image: containrrr/watchtower
    container_name: jab-watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_SCHEDULE=0 2 * * *  # 每天凌晨2点检查更新
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  app_uploads:
    driver: local

networks:
  jab-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16